##[pylyzer] failed /users/charlie/git/hardwaremodule/main.py 1743256414 6063
.re: Never

.___v_desugar_1: Never
.Enum: Never
.SensorType: ClassType
.SensorType <: Never
.SensorType.DIGI: {0}
.SensorType.ANA: {1}

.ProtocolCommands: ClassType
.ProtocolCommands <: Never
.ProtocolCommands.ECHO: {"E"}
.ProtocolCommands.INPUT: {"I"}
.ProtocolCommands.OUTPUT: {"O"}
.ProtocolCommands.PUS: {"P"}

.ProtocolReturnCode: ClassType
.ProtocolReturnCode <: Never
.ProtocolReturnCode.OK: {"OK_"}
.ProtocolReturnCode.ERROR: {"ERR"}
.ProtocolReturnCode.RANGE: {"RNG"}

.Sensors: ClassType
.Sensors.sensorType: Never
.Sensors.sensorState: Never
.Sensors.channel: Never
.Sensors.__call__: (typeEnum: Obj, channel: Obj) -> main.Sensors
.Sensors.returnChannel: (self: main.Sensors) -> Never
.Sensors.returnSensorType: (self: main.Sensors) -> {main.SensorType}
.Sensors.returnSensorState: (self: main.Sensors) -> {0}
.Sensors.changePsuState: (self: main.Sensors, on: Bool) -> NoneType

.SensorDigital: ClassType
main = pyimport "main"
.SensorDigital <: .Sensors
.SensorDigital.__call__: (typeEnum: Obj, channel: Obj) -> main.SensorDigital

.SensorAnalogue: ClassType
.SensorAnalogue <: .Sensors
.SensorAnalogue.__call__: (typeEnum: Obj, channel: Obj) -> main.SensorAnalogue
.SensorAnalogue.ReadPowerConsumption: (self: main.SensorAnalogue) -> NoneType

.Module: ClassType
.Module.sensors: Never
.Module.__call__: (sensorDict: Obj) -> main.Module
.Module.SensorFactory: (self: main.Module, sensorDict: Structural({.items = (self: Obj) -> global::Iterable(global::Tuple([Obj, Never]))})) -> Never
.Module.sendEvent: (self: main.Module, sensor: Obj, msg: Obj) -> {0}
.Module.receiveEvent: (self: main.Module, inp: Str) -> NoneType

.sensorDict: global::Dict!({{"Ana0"}: global::List!({2, 1}, 2), {"Digi1"}: global::List!({0, 1}, 2), {"Digi0"}: global::List!({0}, 2), {"Ana1"}: global::List!({3, 1}, 2)})
.x: .Module


.cli: Str



olHandler.ReadInput: (self: main.ProtocolHandler) -> Never
.ProtocolHandler.ProcessInput: (self: main.ProtocolHandler, inp: Obj) -> Never

lHandler.ProcessInput: (self: main.ProtocolHandler, inp: Obj) -> Never

